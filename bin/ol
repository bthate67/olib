#!/usr/bin/env python3
# This file is placed in the Public Domain.

import os, sys

sys.path.insert(0, "olib")
sys.path.insert(0, "mod")

from dbs import find, listfiles
from hdl import Client, cmd
from hdl import cmd as icmd
from nms import Names
from obj import Object, cfg, fmt, opts
from prs import parseargs
from tms import elapsed, fntime, todate
from trm import exec
from zzz import os, sys, time

import adm

__version__ = 103

class Console(Client):

    prompt = True

    def handle(self, e):
        super().handle(e)
        e.wait()

    def poll(self):
        if Console.prompt:
            return input("> ")

    def raw(self, txt):
        sys.stdout.write(txt)
        sys.stdout.write("\n")
        sys.stdout.flush()

class Log(Object):

    Names.names["log"] = "__main__.Log"

    def __init__(self):
        super().__init__()
        self.txt = ""

def cmd(event):
    event.reply(",".join(sorted(Names.modules.keys())))

def log(event):
    if not event.rest:
        event.reply("log <txt>")
        return
    o = Log()
    o.txt = event.rest
    o.save()
    event.reply("ok")

def fnd(event):
    if not event.args:
        fls = listfiles(cfg.wd)
        if fls:
            event.reply("|".join([x.split(".")[-1].lower() for x in fls]))
        return
    name = event.args[0]
    t = Names.getnames(name)
    nr = -1
    args = list(event.gets)
    try:
        args.extend(event.args[1:])
    except IndexError:
        pass
    got = False
    for otype in t:
        for fn, o in find(otype, event.gets, event.index, event.timed):
            nr += 1
            txt = "%s %s" % (str(nr), fmt(o, args or o.keys(), skip=event.skip.keys()))
            if opts("t") or "t" in event.opts:
                if "Date" in o.keys():
                    fn = os.sep.join(todate(o.Date).split())
                txt = txt + " %s" % (elapsed(time.time() - fntime(fn)))
            got = True
            event.reply(txt)
    if not got:
        event.reply("no result")

def ver(event):
    event.reply("OLIB %s" % __version__)

def boot(name=None, wd=None):
    if len(sys.argv) >= 1:
        parseargs(cfg, " ".join(sys.argv[1:]))
        cfg.update(cfg.sets)
    cfg.name = name or cfg.name
    cfg.wd = wd or cfg.wd

def main():
    boot()
    cfg.name = "ol"
    cfg.version = __version__
    cfg.wd = os.path.expanduser("~/.olib")
    c = Console()
    c.add("cmd", cmd)
    c.add("log", log)
    c.add("fnd", fnd)
    c.add("ver", ver)
    if cfg.txt:
        c.prompt = False
        e = c.event(cfg.otxt)
        icmd(c, e)
        e.wait()
        return
    if cfg.mods:
        c.start()
        c.init(cfg.mods)
        c.wait()

exec(main)
